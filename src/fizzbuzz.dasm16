.org 0x3000
SET PC, fizzbuzz

.include "os_jumptable.dasm16"
.include "kern_jumptable.dasm16"

:fizz dat "Fizz", 0
:buzz dat "Buzz", 0
:max dat 20

:fizzbuzz
	set b, 1 ; A B C are clobberable
	set c, 0
		
	;set pc, [os_enterdone]
	
	:fizzbuzz_loop
		set c, b
		mod c, 3 ; check for fizz
		set push, c ; we'll need this for later
		ife c, 0
			jsr do_fizz
		
		set c, b
		mod c, 5
		set push, c
		ife c, 0
			jsr do_buzz
		
		set c, pop
		set a, pop
		ife c, 0
			set pc, do_newline
		ife a, 0
			set pc, do_newline
		
		set push, b
		set a, b
		jsr fizzbuzz_print_number
		set b, pop
		
	:do_newline
		jsr [kern_newline]
			
		add b, 1
		ife [max], b
			set pc, [os_enterdone]
		
		set pc, fizzbuzz_loop
		
	:fizzbuzz_allocate
		set b, 0x1337 ; arbitrary memory owner
		set a, 10 ; length of block we request
		jsr [kern_malloc]
		set push, a
		set b, 0
		set c, 10
		jsr [kern_memset] ; make sure memory is set to zero
		set a, pop
		set pc, pop
	
	:do_fizz
		set a, fizz
		jsr [kern_print]
		set pc, pop
		
	:do_buzz
		set a, buzz
		jsr [kern_print]
		set pc, pop
		
	:fizzbuzz_print_number
		set push, a
		jsr fizzbuzz_allocate
		set b, a
		set a, pop
		set push, b
		set c, 10
		jsr [kern_itoa]
		set a, pop
		add a, 1
		set push, a
		jsr [kern_print]
		set a, pop
		sub a, 1
		jsr [kern_free]
		set pc, pop
