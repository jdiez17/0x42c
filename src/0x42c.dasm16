.org 0x1000

SET PC, boot

; 0x42c jumptable
:os_enterdone               ; 0x1002
SET PC, enterdone
:os_input                   ; 0x1004
DAT 0x6000

.include "kern_jumptable.dasm16"

; string definitions (currently using C-style strings)
:version dat "0x42c v.0.1 128K MEM READY", 0
:inputc dat "> ", 0

; commands
:reddit dat "reddit", 0
:date dat "date", 0
:clean dat "clear", 0
:vers dat "version", 0
:echo dat "echo", 0
:open dat "open", 0
:halt dat "halt", 0

; outputs
:redditoutput dat "Reddit, the frontpage of the internet.", 0
:dateoutput dat "00:00:00 UTC on 1 January 1970", 0
:unrecognized dat "Unrecognized command ", 0
:unrecognizedEnd dat ".", 0

:inputbuffer dat 0x6000

:boot

:main
    set x, 0xDEAD
	set a, version
	jsr [kern_printnl]	  ; kern_printnl(version)
	jsr reset

:inputready
	set a, inputc
	jsr [kern_print]		; kern_printnl(input)

    set pc, kbloop

:kbloop
	ife [0x9000], 0   ; if there's no input...
		set pc, kbloop
	ife [0x9000], 0xA ; enter
		set pc, enteredcommand
	ife [0x9000], 0x8 ; backspace
		set pc, backspace

	set a, [0x9000]
	jsr [kern_printchar]	 ; kern_printchar([0x9000])

    set a, [inputbuffer]
	set b, [0x9000]
	jsr [kern_strcat]		; kern_strcat([0x1337], [0x9000])
	add [inputbuffer], 1

	set [0x9000], 0

	set pc, kbloop

:backspace
	sub [inputbuffer], 1	; delete last char
	set a, [inputbuffer]
	set [a], 0

    jsr [kern_backspace]

	set [0x9000], 0
	set pc, kbloop

:reset
    set a, 0x6000
    jsr [kern_reserve]
	set [inputbuffer], 0x6000   ; reset pointer
	set a, [inputbuffer]        ; dereference
	set [a], 0	                ; reset string
	set [0x9000], 0	            ; reset keyboard
	set pc, pop

:enteredcommand
	set a, open
	set b, [os_input]
	jsr [kern_startswith]		; kern_startswith(echo, 0x1338)
	ife y, 0
		set pc, load_openf

	set a, echo
	set b, [os_input]
	jsr [kern_startswith]		; kern_startswith(echo, 0x1338)
	ife y, 0
		set pc, load_echof

	set a, reddit
	set b, [os_input]
	jsr [kern_strcmp]			 ; kern_strcmp(reddit, 0x1338)
	ife a, 0
		set pc, redditf

	set a, date
	set b, [os_input]
	jsr [kern_strcmp]			; kern_strcmp(date, 0x1338)
	ife a, 0
		set pc, datef

	set a, clean
	set b, [os_input]
	jsr [kern_strcmp]			; kern_strcmp(date, 0x1338)
	ife a, 0
		set pc, load_cleanf

	set a, vers
	set b, [os_input]
	jsr [kern_strcmp]			; kern_strcmp(vers, 0x1338)
	ife a, 0
		set pc, versionf

	set a, halt
	set b, [os_input]
	jsr [kern_strcmp]			; kern_strcmp(halt, 0x1338)
	ife a, 0
    		set pc, haltf

	ifn a, 0
	set pc, unrecognizedf

	:enterdone
		jsr reset
		set pc, inputready

:load_openf
    set a, 0x3000
    set b, openf_program
    set c, 200
    
    jsr [kern_memcpy]
    set pc, 0x3000

:load_echof
    set a, 0x3000
    set b, echof_program
    set c, 100
    
    jsr [kern_memcpy]
    set pc, 0x3000
    
:load_cleanf
    set a, 0x3000
    set b, cleanf_program
    set c, 100
    
    jsr [kern_memcpy]
    set pc, 0x3000

:versionf
	jsr [kern_newline]
	jsr reset
	set a, 1			  ; return 1
	set pc, main

:unrecognizedf
	jsr [kern_newline]
	set a, unrecognized
	jsr [kern_print]
	set a, [os_input]
	jsr [kern_print]
	set a, unrecognizedEnd
	jsr [kern_printnl]

	set a, 1			   ; return 1
	set pc, enterdone

:redditf
	jsr [kern_newline]
	set a, redditoutput
	jsr [kern_printnl]
	set a, 1			   ; return 1
	set pc, enterdone

:datef
	jsr [kern_newline]
	set a, dateoutput
	jsr [kern_printnl]
	set a, 1			   ; return 1
	set pc, enterdone

:haltf
  set pc, haltf

:openf_program .incbin "../bin/openf_trim.bin" LE
:echof_program .incbin "../bin/echof_trim.bin" LE
:cleanf_program .incbin "../bin/cleanf_trim.bin" LE
