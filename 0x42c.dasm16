.org 0x1000

SET PC, boot
; Kernel jump table defs
:kern_return dat 0x001
:kern_strcmp dat 0x003
:kern_startswith dat 0x005
:kern_strlen dat 0x007
:kern_strcat dat 0x009
:kern_print dat 0x00B
:kern_printnl dat 0x00D
:kern_printchar dat 0x00F
:kern_newline dat 0x011
:kern_scroll dat 0x013
:kern_clearscr dat 0x015
:kern_vidmem dat 0x017
:kern_backspace dat 0x018


; string definitions (currently using C-style strings)
:version dat "0x42c v.0.1 128K MEM READY", 0
:inputc dat "> ", 0

; commands
:reddit dat "reddit", 0
:date dat "date", 0
:clean dat "clear", 0
:vers dat "version", 0
:echo dat "echo", 0
:open dat "open", 0
:openwhat dat "pod_bay_doors", 0

; outputs
:redditoutput dat "Reddit, the frontpage of the internet.", 0
:dateoutput dat "00:00:00 UTC on 1 January 1970", 0
:unrecognized dat "Unrecognized command '", 0
:unrecognizedEnd dat "'.", 0
:openbaydoors dat "I'm sorry, Dave. I'm afraid I can't do that.", 0
:openelse dat "File not found.", 0

:inputbuffer dat 0x6000
:input dat 0x6000

:boot

:main
    set x, 0xDEAD
	set a, version
	jsr [kern_printnl]	  ; kern_printnl(version)
	jsr reset

:inputready
	set a, inputc
	jsr [kern_print]		; kern_printnl(input)

    set pc, kbloop

:kbloop
	ife [0x9000], 0   ; if there's no input...
		set pc, kbloop
	ife [0x9000], 0xA ; enter
		set pc, enteredcommand
	ife [0x9000], 0x8 ; backspace
		set pc, backspace

	set a, [0x9000]
	jsr [kern_printchar]	 ; kern_printchar([0x9000])

    set a, [inputbuffer]
	set b, [0x9000]
	jsr [kern_strcat]		; kern_strcat([0x1337], [0x9000])
	add [inputbuffer], 1

	set [0x9000], 0

	set pc, kbloop

:backspace
	sub [inputbuffer], 1	; delete last char
	set a, [inputbuffer]
	set [a], 0

    jsr [kern_backspace]

	set [0x9000], 0
	set pc, kbloop

:reset
	set [inputbuffer], 0x6000   ; reset pointer
	set a, [inputbuffer]        ; dereference
	set [a], 0	                ; reset string
	set [0x9000], 0	            ; reset keyboard
	set pc, pop

:enteredcommand
	set a, open
	set b, [input]
	jsr [kern_startswith]		; kern_startswith(echo, 0x1338)
	ife y, 1
		set pc, openf

	set a, echo
	set b, [input]
	jsr [kern_startswith]		; kern_startswith(echo, 0x1338)
	ife y, 1
		set pc, echof

	set a, reddit
	set b, [input]
	jsr [kern_strcmp]			 ; kern_strcmp(reddit, 0x1338)
	ife y, 1
		set pc, redditf

	set a, date
	set b, [input]
	jsr [kern_strcmp]			; kern_strcmp(date, 0x1338)
	ife y, 1
		set pc, datef

	set a, clean
	set b, [input]
	jsr [kern_strcmp]			; kern_strcmp(date, 0x1338)
	ife y, 1
		set pc, cleanf

	set a, vers
	set b, [input]
	jsr [kern_strcmp]			; kern_strcmp(vers, 0x1338)
	ife y, 1
		set pc, versionf

	ifn a, 1
	set pc, unrecognizedf

	:enterdone
		jsr reset
		set pc, inputready


:openf
	jsr [kern_newline]
	set a, open
	jsr [kern_strlen]
	add a, 1	; +1 to kern_strlen,
			; for the space

	set b, [input]
	add b, a 	; start at `kern_strlen'
	
	set a, b	; string pointer
	set b, openwhat
	jsr [kern_strcmp]
	
	ife y, 1
		set pc, openf_doors

	ifn y, 1
		set pc, openf_other
	
	:openf_doors
		set a, openbaydoors
		jsr [kern_printnl]
		set pc, openf_end
		
	:openf_other
		set a, openelse
		jsr [kern_printnl]
		set pc, openf_end
	
	:openf_end
		set pc, enterdone
	
:echof
	jsr [kern_newline]
	set a, echo
	jsr [kern_strlen]
	add a, 1	; +1 to kern_strlen,
			; for the space

	set b, [input]
	add b, a 	; start at `kern_strlen'
	set a, b	; string pointer
	jsr [kern_printnl]

	set a, 1
	set pc, enterdone

:cleanf
	jsr [kern_clearscr]
	set [0x1335], 0x8000
	set a, 1
	set pc, enterdone


:versionf
	jsr [kern_newline]
	jsr reset
	set a, 1			  ; return 1
	set pc, main

:unrecognizedf
	jsr [kern_newline]
	set a, unrecognized
	jsr [kern_print]
	set a, [input]
	jsr [kern_print]
	set a, unrecognizedEnd
	jsr [kern_printnl]

	set a, 1			   ; return 1
	set pc, enterdone

:redditf
	jsr [kern_printnl]
	set a, redditoutput
	jsr [kern_printnl]
	set a, 1			   ; return 1
	set pc, enterdone

:datef
	jsr [kern_printnl]
	set a, dateoutput
	jsr [kern_printnl]
	set a, 1			   ; return 1
	set pc, enterdone

:end set pc, end
