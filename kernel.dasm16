set pc, boot

;; BEGIN JUMP TABLE
:0x42c_return       ; 0x001
SET PC, PC          ; NOP (reserved)
:0x42c_strcmp 		; 0x003
SET PC, strcmp
:0x42c_startswith 	; 0x005
SET PC, startswith
:0x42c_strlen		; 0x007
SET PC, strlen
:0x42c_strcat		; 0x009
SET PC, strcat
:0x42c_print		; 0x00B
SET PC, print
:0x42c_printnl		; 0x00D
SET PC, printnl
:0x42c_printchar	; 0x00F
SET PC, printchar
:0x42c_newline		; 0x011
SET PC, newline
:0x42c_scroll		; 0x013
SET PC, scroll
:0x42c_clear		; 0x015
SET PC, clearScreen
:0x42c_vidmem             ; 0x017
DAT 0x8000

:fortyosmem dat 0x1000
:loadingmsg dat "Loading 0x42c...", 0

:boot
	set [0x42c_vidmem], 0x8000
	set a, loadingmsg
	jsr printnl

	set a, fortytwoc
	set b, [fortyosmem]
	set c, 500; length
	jsr memcpy

	set pc, 0x1000


; ===== STANDARD 0x42c LIBRARY ====

:memcpy
	set i, 0
	:memcpy_loop
		ife i, c
			set pc, pop
     	set [b], [a]
     	add a, 1
     	add b, 1
     	add i, 1
     	set pc, memcpy_loop

:startswith
	set y, 0

	ife [a], 0
		set pc, startswith_end_success


	ife [a], [b]
		jsr checkzero

	ifn [a], [b]
		set pc, pop

	ife y, 1
		set pc, pop

	add a, 1
	add b, 1
	set pc, startswith

	:startswith_end_success
		set y, 1
		set pc, pop

:strlen
	set y, 0

	:strlen_begin
		ife [a], 0
		set pc, strlen_end

		add y, 1
		add a, 1
		set pc, strlen_begin

	:strlen_end
		set a, y
		set pc, pop


:strcmp
	set y, 0

	ife [a], [b]
		jsr checkzero

	ife y, 1
		set pc, pop

	ifn [a], [b]
		set pc, pop

	add a, 1
	add b, 1
	set pc, strcmp

:checkzero
	ife [a], 0
		set y, 1
	set pc, pop

:strcat
	set [a], b
	add a, 1
		add b, 1
	set [a], 0
	set pc, pop


:printnl   ; shortcut
	jsr print
	jsr newline
	set pc, pop

:print
	set i, a
	:doprint
		ife [i], 0
			set pc, pop
		set a, [i]
		jsr printchar
		add i, 1
		set pc, doprint

:printchar
	ifg [0x42c_vidmem], 0x81ff ; end of vidmem
		jsr scroll
	set b, [0x42c_vidmem]
	bor a, 0xf000 ; color :D
	set [b], a
	add [0x42c_vidmem], 1
	set pc, pop

:newline
	set i, [0x42c_vidmem]
	mod i, 32 ; width
	set z, 32
	sub z, i
	add [0x42c_vidmem], z
	set pc, pop

:scroll
	set x, 0x8000
	set z, 0x8020
	
	set j, sp			; nifty stack pointer abuse :P
	set sp, 0x8000
	
	:scroll_loop
		set pop, [z]
		set pop, [1+z]
		set pop, [2+z]
		set pop, [3+z]
		set pop, [4+z]
		set pop, [5+z]
		set pop, [6+z]
		set pop, [7+z]
		set pop, [8+z]
		set pop, [9+z]
		set pop, [10+z]
		set pop, [11+z]
		set pop, [12+z]
		set pop, [13+z]
		set pop, [14+z]
		set pop, [15+z]
		set pop, [16+z]
		set pop, [17+z]
		set pop, [18+z]
		set pop, [19+z]
		set pop, [20+z]
		set pop, [21+z]
		set pop, [22+z]
		set pop, [23+z]
		set pop, [24+z]
		set pop, [25+z]
		set pop, [26+z]
		set pop, [27+z]
		set pop, [28+z]
		set pop, [29+z]
		set pop, [30+z]
		set pop, [31+z] ; unrolled loop. So sue me :P
		
		add z, 32
		ifg z, 0x8231
			set pc, scroll_end
		set pc, scroll_loop

	:scroll_end
		set sp, j
		set [0x42c_vidmem], 0x81e0
		set pc, pop


:clearScreen
	set i, sp
	set sp, [0x42c_vidmem]
		:clearScreen_loop
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		set push, 0
		ifg 0x8000, sp
			set pc, clearScreen_done
		set pc, clearScreen_loop

		:clearScreen_done
		set [0x42c_vidmem], 0x8000
		set sp, i
		set pc, pop
		
		
		
		
; HARDCODED OS (will be loaded from disc when IO is announced)
:fortytwoc dat  0x7dc1, 0x10f2, 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf, 0x11, 0x13, 0x15, 0x17, 0x30, 0x78, 0x34, 0x32, 0x63, 0x20, 0x76, 0x2e, 0x30, 0x2e, 0x31, 0x20, 0x31, 0x32, 0x38, 0x4b, 0x20, 0x4d, 0x45, 0x4d, 0x20, 0x52, 0x45, 0x41, 0x44, 0x59, 0x0, 0x3e, 0x20, 0x0, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x0, 0x64, 0x61, 0x74, 0x65, 0x0, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x0, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x0, 0x65, 0x63, 0x68, 0x6f, 0x0, 0x6f, 0x70, 0x65, 0x6e, 0x0, 0x70, 0x6f, 0x64, 0x5f, 0x62, 0x61, 0x79, 0x5f, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x0, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x0, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x20, 0x55, 0x54, 0x43, 0x20, 0x6f, 0x6e, 0x20, 0x31, 0x20, 0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x20, 0x31, 0x39, 0x37, 0x30, 0x0, 0x55, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20, 0x27, 0x0, 0x27, 0x2e, 0x0, 0x49, 0x27, 0x6d, 0x20, 0x73, 0x6f, 0x72, 0x72, 0x79, 0x2c, 0x20, 0x44, 0x61, 0x76, 0x65, 0x2e, 0x20, 0x49, 0x20, 0x63, 0x61, 0x6e, 0x27, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x2e, 0x0, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x0, 0x8000, 0x6000, 0x7c31, 0xdead, 0x7c01, 0x100e, 0x7810, 0x1008, 0x7c10, 0x112f, 0x7c01, 0x1029, 0x7810, 0x1007, 0x7dc1, 0x1100, 0x81ec, 0x9000, 0x7dc1, 0x1100, 0xa9ec, 0x9000, 0x7c10, 0x1139, 0xa1ec, 0x9000, 0x7c10, 0x111c, 0x7801, 0x9000, 0x7810, 0x1009, 0x7801, 0x1337, 0x7811, 0x9000, 0x7810, 0x1006, 0x85e2, 0x1337, 0x81e1, 0x9000, 0x7dc1, 0x1100, 0x85e3, 0x1337, 0x7801, 0x1337, 0x8081, 0x7de1, 0x100d, 0x8000, 0x85e3, 0x100d, 0x8001, 0x7810, 0x1009, 0x85e3, 0x100d, 0x81e1, 0x9000, 0x7dc1, 0x1100, 0x7de1, 0x1337, 0x1338, 0x81e1, 0x1338, 0x81e1, 0x9000, 0x81e1, 0x1336, 0x61c1, 0x7c01, 0x104b, 0x7c11, 0x1338, 0x7810, 0x1004, 0x844c, 0x7dc1, 0x1176, 0x7c01, 0x1046, 0x7c11, 0x1338, 0x7810, 0x1004, 0x844c, 0x7dc1, 0x1199, 0x7c01, 0x102c, 0x7c11, 0x1338, 0x7810, 0x1003, 0x844c, 0x7dc1, 0x11c9, 0x7c01, 0x1033, 0x7c11, 0x1338, 0x7810, 0x1003, 0x844c, 0x7dc1, 0x11d4, 0x7c01, 0x1038, 0x7c11, 0x1338, 0x7810, 0x1003, 0x844c, 0x7dc1, 0x11a9, 0x7c01, 0x103e, 0x7c11, 0x1338, 0x7810, 0x1003, 0x844c, 0x7dc1, 0x11b1, 0x840d, 0x7dc1, 0x11b8, 0x7c10, 0x112f, 0x7dc1, 0x10fa, 0x7810, 0x100a, 0x7c01, 0x104b, 0x7810, 0x1005, 0x8402, 0x7c11, 0x1338, 0x12, 0x401, 0x7c11, 0x1050, 0x7810, 0x1003, 0x844c, 0x7dc1, 0x118b, 0x844d, 0x7dc1, 0x1191, 0x7c01, 0x10be, 0x7810, 0x1008, 0x7dc1, 0x1197, 0x7c01, 0x10e0, 0x7810, 0x1008, 0x7dc1, 0x1197, 0x7dc1, 0x1172, 0x7810, 0x100a, 0x7c01, 0x1046, 0x7810, 0x1005, 0x8402, 0x7c11, 0x1338, 0x12, 0x401, 0x7810, 0x1008, 0x8401, 0x7dc1, 0x1172, 0x7810, 0x100c, 0x7de1, 0x1335, 0x8000, 0x8401, 0x7dc1, 0x1172, 0x7810, 0x100a, 0x7c10, 0x112f, 0x8401, 0x7dc1, 0x10f2, 0x7810, 0x100a, 0x7c01, 0x10a4, 0x7810, 0x1007, 0x7c01, 0x1338, 0x7810, 0x1007, 0x7c01, 0x10bb, 0x7810, 0x1008, 0x8401, 0x7dc1, 0x1172, 0x7c31, 0x539, 0x7810, 0x1008, 0x7c01, 0x105e, 0x7810, 0x1008, 0x8401, 0x7dc1, 0x1172, 0x7810, 0x1008, 0x7c01, 0x1085, 0x7810, 0x1008, 0x8401, 0x7dc1, 0x1172, 0x7dc1, 0x11dd, 0

